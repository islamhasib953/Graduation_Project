### README: شرح دورة عمل النظام، اللوجيك، وتدفق البيانات

#### **دورة عمل النظام (Cycle)**
النظام بيشتغل بشكل دوري ومستمر لمراقبة بيانات الاستشعار للأطفال وتحليلها لحساب حالة النشاط (Baby Activity) وجودة النوم (Sleep Quality). الدورة دي بتتكون من الخطوات التالية:

1. **جمع البيانات**:
   - البيانات بتيجي من أجهزة الاستشعار (مثل معدل النبض، الأكسجين، الحركة، الحرارة) وبتخزن أولاً في قاعدة البيانات تحت موديل `SensorData`.

2. **التحقق الدوري**:
   - النظام بيشتغل كل 30 ثانية (باستخدام ميكانيزم الـ Continuous Validation) عشان يتحقق من كل طفل مسجل في النظام.
   - بيجيب آخر 10 قراءات من `SensorData` لكل طفل، ويصنفها حسب عمر الطفل (بين 6 شهور و7 سنين).

3. **التحقق والتخزين**:
   - البيانات بتتحقق بناءً على نطاقات معينة (مثل نبض القلب، نسبة الأكسجين، إلخ) مرتبطة بعمر الطفل.
   - لو البيانات صالحة، بتتخزن في موديل `ValidatedSensorData` مع حالة التحقق (Validated، PartiallyValidated، أو Invalid).
   - في نفس الوقت، النظام بيحسب **Baby Activity** (مثل Resting، Moderate Activity) و**Sleep Quality** (مثل Deep Sleep، Awake) بناءً على القراءات.

4. **إرسال التحديثات**:
   - لما يتم تخزين بيانات موثقة أو يتم حساب نشاط أو جودة نوم، النظام بيبعت التحديثات فورًا عبر تقنية WebSocket للفرونت (التطبيق أو الواجهة).

5. **استعراض البيانات**:
   - المستخدم ممكن يطلب استعراض البيانات الموثقة، نشاط الأطفال، أو جودة نومهم لآخر 24 ساعة من خلال واجهة الـ API.

الدورة دي بتكرر كل 30 ثانية أو لما ييجي طلب جديد، مما يضمن تحديث مستمر للبيانات في الوقت الفعلي.

---

#### **شرح اللوجيك**
النظام بيعتمد على منطق تحليلي دقيق لتحديد حالة الطفل بناءً على بيانات الاستشعار:

- **التحقق من البيانات**:
  - كل قراءة (مثل نبض القلب، نسبة الأكسجين، الحركة) بتتقارن مع نطاقات محددة مرتبطة بعمر الطفل. مثلاً، نبض الطفل اللي عمره سنة بيكون أعلى من الطفل اللي عمره 5 سنين.
  - لو فيه قراءات غير صالحة (خارج النطاقات)، بتتم تصنيف البيانات كـ "Invalid" أو "PartiallyValidated" حسب نسبة القراءات الصحيحة.

- **حساب Baby Activity**:
  - يتم تحليل معدل النبض، متوسط الحركة (من الجيروسكوب والتسارع)، نسبة الأكسجين، والحرارة.
  - النظام بيستخدم نظام تسجيل (Scoring System) عشان يحدد الحالة الأنسب (مثل Resting، Moderate Activity، Distress/Stress) بناءً على أقصى تطابق مع النطاقات.
  - لو فيه قراءات غير طبيعية (مثل نبض مرتفع جدًا أو انخفاض مفاجئ في الأكسجين)، بيتم تصنيفها كـ "Distress/Stress".

- **حساب Sleep Quality**:
  - يتم تحليل معدل النبض، متوسط التسارع، نسبة الأكسجين، الحرارة، ومستوى الحركة.
  - يتم تطبيق نفس نظام التسجيل لتحديد حالة النوم (مثل Deep Sleep، REM، Sleep Disturbance).
  - لو فيه حركة كبيرة أو انخفاض في الأكسجين، بيتم تصنيفها كـ "Sleep Disturbance".

- **التكيف مع العمر**:
  - النطاقات بتتعدل ديناميكيًا حسب عمر الطفل. مثلاً، الأطفال الأصغر (6-12 شهر) ليهم نطاق نبض أعلى، بينما الأكبر (5-7 سنين) ليهم نطاق أقل.

اللوجيك ده مصمم عشان يكون مرن ودقيق، وبتعتمد على البيانات اللي جاية من الاستشعارات عشان تكتشف أي تغيرات غير طبيعية بسرعة.

---

#### **تدفق البيانات (من الباك إلى الفرونت)**
- **من الباك إلى الفرونت**:
  - **جمع البيانات**: البيانات بتيجي من أجهزة الاستشعار (مثل معدل النبض، الحركة) وبتخزن في قاعدة البيانات.
  - **التحليل والتخزين**: الباك بيحلل البيانات، يخزنها في `ValidatedSensorData`، ويحسب **Baby Activity** و**Sleep Quality**، وبعدين يخزنهم في موديلاتهم الخاصة.
  - **إرسال التحديثات**: الباك بيستخدم WebSocket عشان يبعت التحديثات فورًا للفرونت. فيه ثلاثة أنواع من التحديثات:
    - **Validated Sensor Data**: بيبعت البيانات الموثقة لما يتم التحقق منها.
    - **Baby Activity Update**: بيبعت حالة النشاط (مثل "Moderate Activity") مع التفاصيل.
    - **Sleep Quality Update**: بيبعت حالة النوم (مثل "Deep Sleep") مع التفاصيل.
  - التحديثات دي بتتسرّع كـ رسائل فورية للفرونت عبر الاتصال WebSocket.

- **من الفرونت إلى الباك**:
  - الفرونت (مثل تطبيق Flutter) بيتصل بالباك عبر WebSocket باستخدام عنوان السيرفر (مثل `ws://localhost:8000`).
  - بيستمع للتحديثات اللي بيبعتها الباك، وبيستقبل البيانات كـ رسائل (مثل JSON objects).
  - المستخدم ممكن يطلب بيانات يدويًا (مثل آخر يوم من النشاط) عن طريق إرسال طلبات HTTP (GET) للـ API endpoints.

- **كيف الفرونت بيستلم الداتا؟**
  - الفرونت بيتصل بالـ WebSocket ويبقى في حالة استماع مستمر.
  - لما الباك يبعت حدث (مثل `"babyActivityUpdate"`)، الفرونت بيستقبل الرسالة (زي `{ "activityStage": "Moderate Activity", "bpm": 110, ... }`).
  - الفرونت بيحول الرسالة دي لصيغة يقدر يعرضها في الواجهة (مثل تحديث شاشة تعرض حالة الطفل).
  - لو المستخدم طلب بيانات يدويًا، الفرونت بيستقبل الرد من الـ API كـ JSON ويعرضه.

- **التكامل**:
  - التدفق بيضمن إن الفرونت دايمًا محدث في الوقت الفعلي مع أي تغيير في حالة الطفل، سواء كان نشاط أو نوم، مع إمكانية استعراض التاريخ لآخر 24 ساعة.

---

### **ملاحظات إضافية**
- **الأداء**: الدورة الدورية (كل 30 ثانية) مضبوطة عشان توازن بين التحديث المستمر واستهلاك الموارد.
- **المرونة**: النظام بيتكيف مع عمر الطفل، مما يخليه مناسب لأطفال في نطاق العمر المحدد.
- **الأمان**: كل الطلبات بتحتاج توثيق (Token)، وبتتحقق أذونات المستخدم.

لو عايز أضيف تفاصيل أكتر أو أوضح حاجة، قولي!