const express = require("express");
const router = express.Router();
const verifyToken = require("../middlewares/virifyToken");
const allowedTo = require("../middlewares/allowedTo");
const userRoles = require("../utils/userRoles");
const doctorController = require("../controllers/doctor.controller");
const Notification = require("../models/notification.model");
const appError = require("../utils/appError");
const { sendNotification } = require("../controllers/notifications.controller");

// Routes للدكتور نفسه (Profile, Logout)
router
  .route("/profile")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR),
    doctorController.getDoctorProfile
  )
  .patch(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR),
    doctorController.updateDoctorProfile
  )
  .delete(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR),
    doctorController.deleteDoctorProfile
  );

router.post(
  "/logout",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.DOCTOR),
  doctorController.logoutDoctor
);

// Route لتعديل الأيام والأوقات المتاحة
router.patch(
  "/availability",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.DOCTOR),
  doctorController.updateAvailability
);

// Route لجلب الحجوزات القادمة
router.get(
  "/appointments/upcoming",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.DOCTOR),
  doctorController.getUpcomingAppointments
);

// Route لجلب السجل الطبي وبيانات النمو بتاعة الطفل
router.post(
  "/child/records",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.DOCTOR),
  doctorController.getChildRecords
);

// Route لتحديث حالة الحجز
router.patch(
  "/appointments/:appointmentId/status",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.DOCTOR),
  doctorController.updateAppointmentStatus
);

// Route لجلب كل الحجوزات بتاعة اليوزر مع childId
router.get(
  "/appointments/user/:childId",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.PATIENT),
  doctorController.getUserAppointments
);

// Route لجلب الدكاترة المفضلين مع childId
router.get(
  "/favorites/:childId",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.PATIENT),
  doctorController.getFavoriteDoctors
);

// Route لعرض كل الدكاترة مع childId
router.get(
  "/:childId",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
  doctorController.getAllDoctors
);

// Routes لتفاصيل دكتور معين مع childId
router
  .route("/:childId/:doctorId")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    doctorController.getSingleDoctor
  );

// Route لحجز موعد مع childId
router.post(
  "/:childId/:doctorId/book",
  verifyToken,
  allowedTo(userRoles.ADMIN, userRoles.PATIENT),
  doctorController.bookAppointment
);

// Routes لإضافة وإزالة دكتور من المفضلة
router
  .route("/:childId/:doctorId/favorite")
  .post(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.PATIENT),
    doctorController.addFavoriteDoctor
  )
  .delete(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.PATIENT),
    doctorController.removeFavoriteDoctor
  );

// Routes لتعديل وإلغاء الحجز
router
  .route("/appointments/:childId/:appointmentId")
  .patch(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.PATIENT),
    doctorController.rescheduleAppointment
  )
  .delete(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.PATIENT),
    doctorController.cancelAppointment
  );

// نقطة نهاية لحفظ FCM Token
router.post(
  "/save-fcm-token",
  verifyToken,
  allowedTo(userRoles.DOCTOR),
  doctorController.saveFcmToken
);

module.exports = router;



const express = require("express");
const router = express.Router();
const verifyToken = require("../middlewares/virifyToken");
const allowedTo = require("../middlewares/allowedTo");
const userRoles = require("../utils/userRoles");
// const validationschema = require("../middleware/validationschema");
const growthController = require("../controllers/growth.controller");
const { sendNotification } = require("../controllers/notifications.controller");
const Appointment = require("../models/appointment.model");

router
  .route("/:childId")
  .post(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    // validationschema.validateGrowth,
    async (req, res, next) => {
      try {
        const { childId } = req.params;
        const userId = req.user.id;

        // استدعاء دالة createGrowth
        const result = await growthController.createGrowth(req, res, next);

        // التأكد إن العملية نجحت وإن الـ response تم إرساله
        if (res.headersSent) {
          const growth = result.data; // افتراض إن createGrowth بترجع data
          if (growth) {
            console.log(
              `Sending notification for new growth record: Height ${growth.height}, Weight ${growth.weight}`
            );
            await sendNotification(
              userId,
              childId,
              null,
              "New Growth Record Added",
              `A new growth record (Height: ${growth.height}, Weight: ${growth.weight}) has been added for your child.`,
              "growth",
              "user"
            );

            // التحقق من انحراف الطول
            const standardHeight = growth.ageInMonths * 2 + 50;
            const heightDeviation = Math.abs(growth.height - standardHeight);
            if (heightDeviation > 10) {
              console.log(
                `Sending growth alert for child ${childId}: Height deviation ${heightDeviation}`
              );
              await sendNotification(
                userId,
                childId,
                null,
                "Growth Alert",
                `The height of your child (${growth.height} cm) deviates significantly from the expected value (${standardHeight} cm).`,
                "growth_alert",
                "user"
              );

              // إشعار للدكتور (مش مفعل افتراضيًا)
              /*
              const latestAppointment = await Appointment.findOne({ childId, status: "Accepted" })
                .sort({ date: -1 })
                .select("doctorId");
              if (latestAppointment && latestAppointment.doctorId) {
                await sendNotification(
                  null,
                  childId,
                  latestAppointment.doctorId,
                  "Growth Alert for Patient",
                  `A growth record for a patient shows significant height deviation (Height: ${growth.height} cm, Expected: ${standardHeight} cm).`,
                  "growth_alert",
                  "doctor"
                );
              }
              */
            }
          }
        }
      } catch (error) {
        console.error(
          `Error creating growth record for child ${childId}:`,
          error
        );
        return next(
          appError.create("Failed to create growth record", 500, "error")
        );
      }
    }
  )
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    growthController.getAllGrowth
  );

router
  .route("/:childId/last")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    growthController.getLastGrowthRecord
  );

router
  .route("/:childId/last-change")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    growthController.getLastGrowthChange
  );

router
  .route("/:childId/:growthId")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    growthController.getSingleGrowth
  )
  .patch(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    // validationschema.validateGrowth,
    async (req, res, next) => {
      try {
        const { childId, growthId } = req.params;
        const userId = req.user.id;

        // استدعاء دالة updateGrowth
        const result = await growthController.updateGrowth(req, res, next);

        // التأكد إن العملية نجحت وإن الـ response تم إرساله
        if (res.headersSent) {
          const growth = result.data; // افتراض إن updateGrowth بترجع data
          if (growth) {
            console.log(
              `Sending notification for updated growth record: Height ${growth.height}, Weight ${growth.weight}`
            );
            await sendNotification(
              userId,
              childId,
              null,
              "Growth Record Updated",
              `The growth record (Height: ${growth.height}, Weight: ${growth.weight}) has been updated for your child.`,
              "growth",
              "user"
            );

            // التحقق من انحراف الطول
            const standardHeight = growth.ageInMonths * 2 + 50;
            const heightDeviation = Math.abs(growth.height - standardHeight);
            if (heightDeviation > 10) {
              console.log(
                `Sending growth alert for child ${childId}: Height deviation ${heightDeviation}`
              );
              await sendNotification(
                userId,
                childId,
                null,
                "Growth Alert",
                `The height of your child (${growth.height} cm) deviates significantly from the expected value (${standardHeight} cm).`,
                "growth_alert",
                "user"
              );

              // إشعار للدكتور (مش مفعل افتراضيًا)
              /*
              const latestAppointment = await Appointment.findOne({ childId, status: "Accepted" })
                .sort({ date: -1 })
                .select("doctorId");
              if (latestAppointment && latestAppointment.doctorId) {
                await sendNotification(
                  null,
                  childId,
                  latestAppointment.doctorId,
                  "Growth Alert for Patient",
                  `A growth record for a patient shows significant height deviation (Height: ${growth.height} cm, Expected: ${standardHeight} cm).`,
                  "growth_alert",
                  "doctor"
                );
              }
              */
            }
          }
        }
      } catch (error) {
        console.error(
          `Error updating growth record ${growthId} for child ${childId}:`,
          error
        );
        return next(
          appError.create("Failed to update growth record", 500, "error")
        );
      }
    }
  )
  .delete(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    async (req, res, next) => {
      try {
        const { childId, growthId } = req.params;
        const userId = req.user.id;

        // استدعاء دالة deleteGrowth
        const result = await growthController.deleteGrowth(req, res, next);

        // التأكد إن العملية نجحت وإن الـ response تم إرساله
        if (res.headersSent) {
          console.log(
            `Sending notification for deleted growth record: ${growthId}`
          );
          await sendNotification(
            userId,
            childId,
            null,
            "Growth Record Deleted",
            `A growth record has been deleted for your child.`,
            "growth",
            "user"
          );
        }
      } catch (error) {
        console.error(
          `Error deleting growth record ${growthId} for child ${childId}:`,
          error
        );
        return next(
          appError.create("Failed to delete growth record", 500, "error")
        );
      }
    }
  );

module.exports = router;


const express = require("express");
const { validationResult } = require("express-validator");
const router = express.Router();
const appError = require("../utils/appError");
const medicineController = require("../controllers/medicine.controller");
const validationschema = require("../middlewares/validationschema");
const verifyToken = require("../middlewares/virifyToken");
const allowedTo = require("../middlewares/allowedTo");
const userRoles = require("../utils/userRoles");
const { sendNotification } = require("../controllers/notifications.controller");

router
  .route("/:childId")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    medicineController.getAllMedicines
  )
  .post(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    validationschema.validateMedicine,
    async (req, res, next) => {
      try {
        const { childId } = req.params;
        const userId = req.user.id;

        // استدعاء دالة createMedicine
        const result = await medicineController.createMedicine(req, res, next);

        // التأكد إن العملية نجحت وإن الـ response تم إرساله
        if (res.headersSent) {
          const medicine = result.data; // افتراض إن createMedicine بترجع data في الـ response
          if (medicine) {
            console.log(
              `Sending notification for new medicine: ${medicine.name}`
            );
            await sendNotification(
              userId,
              childId,
              null,
              "New Medicine Added",
              `A new medicine "${medicine.name}" has been added for your child.`,
              "medicine",
              "user"
            );
          }
        }
      } catch (error) {
        console.error(`Error creating medicine for child ${childId}:`, error);
        return next(appError.create("Failed to create medicine", 500, "error"));
      }
    }
  );

router
  .route("/:childId/:medicineId")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    medicineController.getSingleMedicine
  )
  .patch(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    validationschema.validateMedicine,
    async (req, res, next) => {
      try {
        const { childId, medicineId } = req.params;
        const userId = req.user.id;

        // استدعاء دالة updateMedicine
        const result = await medicineController.updateMedicine(req, res, next);

        // التأكد إن العملية نجحت وإن الـ response تم إرساله
        if (res.headersSent) {
          const medicine = result.data; // افتراض إن updateMedicine بترجع data في الـ response
          if (medicine) {
            console.log(
              `Sending notification for updated medicine: ${medicine.name}`
            );
            await sendNotification(
              userId,
              childId,
              null,
              "Medicine Updated",
              `The medicine "${medicine.name}" has been updated for your child.`,
              "medicine",
              "user"
            );
          }
        }
      } catch (error) {
        console.error(
          `Error updating medicine ${medicineId} for child ${childId}:`,
          error
        );
        return next(appError.create("Failed to update medicine", 500, "error"));
      }
    }
  )
  .delete(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    async (req, res, next) => {
      try {
        const { childId, medicineId } = req.params;
        const userId = req.user.id;

        // استدعاء دالة deleteMedicine
        const result = await medicineController.deleteMedicine(req, res, next);

        // التأكد إن العملية نجحت وإن الـ response تم إرساله
        if (res.headersSent) {
          console.log(
            `Sending notification for deleted medicine: ${medicineId}`
          );
          await sendNotification(
            userId,
            childId,
            null,
            "Medicine Deleted",
            `The medicine has been deleted for your child.`,
            "medicine",
            "user"
          );
        }
      } catch (error) {
        console.error(
          `Error deleting medicine ${medicineId} for child ${childId}:`,
          error
        );
        return next(appError.create("Failed to delete medicine", 500, "error"));
      }
    }
  );

module.exports = router;



const express = require("express");
const router = express.Router();
const verifyToken = require("../middlewares/virifyToken");
const allowedTo = require("../middlewares/allowedTo");
const userRoles = require("../utils/userRoles");
const notificationsController = require("../controllers/notifications.controller");
const User = require("../models/user.model");
const Doctor = require("../models/doctor.model");
const { sendPushNotification } = require("../config/firebase-config");

router.get(
  "/user/:childId",
  verifyToken,
  allowedTo(userRoles.PATIENT),
  notificationsController.getUserNotifications
);

router.get(
  "/doctor",
  verifyToken,
  allowedTo(userRoles.DOCTOR),
  notificationsController.getDoctorNotifications
);

router.patch(
  "/:notificationId/read",
  verifyToken,
  allowedTo(userRoles.PATIENT, userRoles.DOCTOR),
  notificationsController.markAsRead
);

// نقطة نهاية لإرسال إشعارات الـ Bracelet
router.post(
  "/bracelet",
  verifyToken,
  allowedTo(userRoles.PATIENT),
  async (req, res, next) => {
    const { childId, title, body } = req.body;
    const userId = req.user.id;

    if (!childId || !title || !body) {
      return res.status(400).json({
        status: "fail",
        message: "childId, title, and body are required",
      });
    }

    try {
      await notificationsController.sendNotification(
        userId,
        childId,
        null,
        title,
        body,
        "bracelet",
        "user"
      );

      res.status(201).json({
        status: "success",
        message: "Bracelet notification sent successfully",
      });
    } catch (error) {
      console.error("Error sending bracelet notification:", error);
      res.status(500).json({
        status: "error",
        message: "Failed to send bracelet notification",
      });
    }
  }
);

// نقطة نهاية لإرسال إشعارات عامة (للأدمن فقط)
router.post(
  "/send-general",
  verifyToken,
  allowedTo(userRoles.ADMIN),
  async (req, res, next) => {
    const { title, body, target } = req.body;

    if (!title || !body || !target) {
      return res.status(400).json({
        status: "fail",
        message: "Title, body, and target are required",
      });
    }

    try {
      let fcmTokens = [];
      let notifications = [];

      if (target === "user" || target === "all") {
        const users = await User.find().select("fcmToken _id");
        fcmTokens.push(
          ...users.map((user) => user.fcmToken).filter((token) => token)
        );
        notifications.push(
          ...users.map((user) => ({
            userId: user._id,
            title,
            body,
            type: "general",
            target: "user",
            isRead: false,
          }))
        );
      }

      if (target === "doctor" || target === "all") {
        const doctors = await Doctor.find().select("fcmToken _id");
        fcmTokens.push(
          ...doctors.map((doctor) => doctor.fcmToken).filter((token) => token)
        );
        notifications.push(
          ...doctors.map((doctor) => ({
            doctorId: doctor._id,
            title,
            body,
            type: "general",
            target: "doctor",
            isRead: false,
          }))
        );
      }

      if (fcmTokens.length === 0) {
        return res.status(404).json({
          status: "fail",
          message: "No recipients found with FCM tokens",
        });
      }

      for (const notification of notifications) {
        await notificationsController.sendNotification(
          notification.userId || null,
          null,
          notification.doctorId || null,
          notification.title,
          notification.body,
          notification.type,
          notification.target
        );
      }

      res.status(200).json({
        status: "success",
        message: "General notification sent successfully",
      });
    } catch (error) {
      console.error("Error sending general notification:", error);
      res.status(500).json({
        status: "error",
        message: "Failed to send general notification",
      });
    }
  }
);

module.exports = router;


const express = require("express");
const usersController = require("../controllers/users.controller");
const verifyToken = require("../middlewares/virifyToken");
const allowedTo = require("../middlewares/allowedTo");
const userRoles = require("../utils/userRoles");
const {
  validateRegister,
  validateLogin,
} = require("../middlewares/validationschema");

const multer = require("multer");
const appError = require("../utils/appError");
const fs = require("fs");
const path = require("path");

const diskStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = path.join(__dirname, "..", "Uploads");
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    const ext = file.mimetype.split("/")[1];
    cb(null, `user-${Date.now()}.${ext}`);
  },
});

const fileFilter = (req, file, cb) => {
  file.mimetype.startsWith("image")
    ? cb(null, true)
    : cb(appError.create("The file must be an image", 400), false);
};

const upload = multer({
  storage: diskStorage,
  fileFilter,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB حد أقصى
});

const router = express.Router();

router
  .route("/")
  .get(verifyToken, allowedTo(userRoles.ADMIN), usersController.getAllUsers);

router
  .route("/register")
  .post(upload.single("avatar"), validateRegister, async (req, res, next) => {
    if (!req.file) {
      req.body.avatar = "Uploads/profile.jpg"; // صورة افتراضية
    }
    await usersController.registerUser(req, res, next);
  });

router.route("/login").post(validateLogin, usersController.loginUser);

router
  .route("/profile")
  .get(
    verifyToken,
    allowedTo(userRoles.PATIENT),
    usersController.getUserProfile
  )
  .patch(
    verifyToken,
    allowedTo(userRoles.PATIENT),
    usersController.updateUserProfile
  )
  .delete(
    verifyToken,
    allowedTo(userRoles.PATIENT),
    usersController.deleteUserProfile
  );

router.post(
  "/logout",
  verifyToken,
  allowedTo(userRoles.PATIENT),
  usersController.logoutUser
);

router.post(
  "/save-fcm-token",
  verifyToken,
  allowedTo(userRoles.PATIENT),
  async (req, res, next) => {
    const { fcmToken } = req.body;
    const userId = req.user.id;

    if (!fcmToken) {
      return next(appError.create("FCM Token is required", 400, "fail"));
    }

    try {
      const User = require("../models/user.model");
      const user = await User.findById(userId);

      if (!user) {
        return next(appError.create("User not found", 404, "fail"));
      }

      // التحقق من تكرار fcmToken
      if (user.fcmToken === fcmToken) {
        return res.status(200).json({
          status: "success",
          message: "FCM Token is already up to date",
        });
      }

      // تنظيف fcmToken من مستخدمين آخرين
      await User.updateMany(
        { fcmToken, _id: { $ne: userId } },
        { fcmToken: null }
      );

      user.fcmToken = fcmToken;
      await user.save();

      // إرسال إشعار لتأكيد التحديث
      const {
        sendNotification,
      } = require("../controllers/notifications.controller");
      await sendNotification(
        userId,
        null,
        null,
        "FCM Token Updated",
        "Your notification settings have been updated successfully.",
        "profile",
        "user"
      );

      res.status(200).json({
        status: "success",
        message: "FCM Token saved successfully",
      });
    } catch (error) {
      console.error("Error saving FCM Token:", error);
      return next(appError.create("Server error", 500, "error"));
    }
  }
);

module.exports = router;


const express = require("express");
const router = express.Router();
const vaccinationController = require("../controllers/vaccination.controller");
const verifyToken = require("../middlewares/virifyToken");
const allowedTo = require("../middlewares/allowedTo");
const userRoles = require("../utils/userRoles");
const { sendNotification } = require("../controllers/notifications.controller");
const User = require("../models/user.model");
const Child = require("../models/child.model");

router
  .route("/")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN),
    vaccinationController.getAllVaccinations
  )
  .post(verifyToken, allowedTo(userRoles.ADMIN), async (req, res, next) => {
    try {
      const adminId = req.user.id;

      // استدعاء دالة createVaccinationForAllChildren
      const result =
        await vaccinationController.createVaccinationForAllChildren(
          req,
          res,
          next
        );

      // التأكد إن العملية نجحت وإن الـ response تم إرساله
      if (res.headersSent) {
        const vaccination = result.data; // افتراض إن createVaccinationForAllChildren بترجع data
        if (vaccination) {
          console.log(
            `Sending notifications for new vaccination: ${req.body.disease}`
          );

          // إشعار للأدمن
          await sendNotification(
            adminId,
            null,
            null,
            "New Vaccination Added",
            `A new vaccination "${req.body.disease}" has been added for all children.`,
            "vaccination",
            "user"
          );

          // إشعار لكل اليوزرز اللي عندهم أطفال
          const users = await User.find({ role: userRoles.PATIENT }).select(
            "_id"
          );
          const children = await Child.find({
            parentId: { $in: users.map((user) => user._id) },
          }).select("_id parentId");

          for (const child of children) {
            await sendNotification(
              child.parentId,
              child._id,
              null,
              "New Vaccination Available",
              `A new vaccination "${req.body.disease}" is now required for your child.`,
              "vaccination",
              "user"
            );
          }
        }
      }
    } catch (error) {
      console.error("Error creating vaccination for all children:", error);
      return next(
        appError.create("Failed to create vaccination", 500, "error")
      );
    }
  });

router
  .route("/:vaccinationId")
  .delete(verifyToken, allowedTo(userRoles.ADMIN), async (req, res, next) => {
    try {
      const adminId = req.user.id;

      // استدعاء دالة deleteVaccinationForAllChildren
      const result =
        await vaccinationController.deleteVaccinationForAllChildren(
          req,
          res,
          next
        );

      // التأكد إن العملية نجحت وإن الـ response تم إرساله
      if (res.headersSent) {
        console.log(
          `Sending notification for deleted vaccination: ${req.params.vaccinationId}`
        );
        await sendNotification(
          adminId,
          null,
          null,
          "Vaccination Deleted",
          `The vaccination has been deleted for all children.`,
          "vaccination",
          "user"
        );
      }
    } catch (error) {
      console.error(
        `Error deleting vaccination ${req.params.vaccinationId}:`,
        error
      );
      return next(
        appError.create("Failed to delete vaccination", 500, "error")
      );
    }
  });

router
  .route("/:childId")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    vaccinationController.getVaccinationsByChildId
  );

router
  .route("/:childId/:vaccinationId")
  .get(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    vaccinationController.getUserVaccination
  )
  .patch(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    async (req, res, next) => {
      try {
        const { childId, vaccinationId } = req.params;
        const userId = req.user.id;

        // استدعاء دالة updateUserVaccination
        const result = await vaccinationController.updateUserVaccination(
          req,
          res,
          next
        );

        // التأكد إن العملية نجحت وإن الـ response تم إرساله
        if (res.headersSent) {
          const vaccination = result.data; // افتراض إن updateUserVaccination بترجع data
          if (vaccination) {
            console.log(
              `Sending notification for updated vaccination: ${vaccinationId}`
            );
            await sendNotification(
              userId,
              childId,
              null,
              "Vaccination Updated",
              `The vaccination "${vaccination.vaccineInfoId.disease}" has been updated for your child.`,
              "vaccination",
              "user"
            );
          }
        }
      } catch (error) {
        console.error(
          `Error updating vaccination ${vaccinationId} for child ${childId}:`,
          error
        );
        return next(
          appError.create("Failed to update vaccination", 500, "error")
        );
      }
    }
  )
  .delete(
    verifyToken,
    allowedTo(userRoles.ADMIN, userRoles.DOCTOR, userRoles.PATIENT),
    async (req, res, next) => {
      try {
        const { childId, vaccinationId } = req.params;
        const userId = req.user.id;

        // استدعاء دالة deleteUserVaccination
        const result = await vaccinationController.deleteUserVaccination(
          req,
          res,
          next
        );

        // التأكد إن العملية نجحت وإن الـ response تم إرساله
        if (res.headersSent) {
          console.log(
            `Sending notification for deleted vaccination: ${vaccinationId}`
          );
          await sendNotification(
            userId,
            childId,
            null,
            "Vaccination Deleted",
            `The vaccination has been deleted for your child.`,
            "vaccination",
            "user"
          );
        }
      } catch (error) {
        console.error(
          `Error deleting vaccination ${vaccinationId} for child ${childId}:`,
          error
        );
        return next(
          appError.create("Failed to delete vaccination", 500, "error")
        );
      }
    }
  );

module.exports = router;

شوف دول لو محتاجين تعديل